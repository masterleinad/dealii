// ---------------------------------------------------------------------
//
// Copyright (C) 2013 - 2016 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------



for (S : REAL_SCALARS)
{
    namespace TrilinosWrappers
    \{
    template void
    SparseMatrix::reinit (const dealii::SparseMatrix<S> &,
                          const double,
                          const bool,
                          const dealii::SparsityPattern *);
    template void
    SparseMatrix::reinit (const Epetra_Map &,
                          const dealii::SparseMatrix<S> &,
                          const double,
                          const bool,
                          const dealii::SparsityPattern *);
    template void
    SparseMatrix::reinit (const Epetra_Map &,
                          const Epetra_Map &,
                          const dealii::SparseMatrix<S> &,
                          const double,
                          const bool,
                          const dealii::SparsityPattern *);
    template void
    SparseMatrix::reinit (const IndexSet &,
                          const IndexSet &,
                          const dealii::SparseMatrix<S> &,
                          const MPI_Comm &,
                          const double,
                          const bool,
                          const dealii::SparsityPattern *);
    \}
}

for (D : DUMMY)
{
    namespace TrilinosWrappers
    \{
    template void
    SparseMatrix::reinit (const dealii::SparsityPattern &);

    template void
    SparseMatrix::reinit (const DynamicSparsityPattern &);

    template void
    SparseMatrix::reinit (const Epetra_Map &,
                          const dealii::SparsityPattern &,
                          const bool);
    template void
    SparseMatrix::reinit (const Epetra_Map &,
                          const DynamicSparsityPattern &,
                          const bool);
    template void
    SparseMatrix::reinit (const Epetra_Map &,
                          const Epetra_Map &,
                          const dealii::SparsityPattern &,
                          const bool);
    template void
    SparseMatrix::reinit (const Epetra_Map &,
                          const Epetra_Map &,
                          const DynamicSparsityPattern &,
                          const bool);
    template void
    SparseMatrix::reinit (const IndexSet &,
                          const IndexSet &,
                          const dealii::SparsityPattern &,
                          const MPI_Comm &,
                          const bool);
    template void
    SparseMatrix::reinit (const IndexSet &,
                          const IndexSet &,
                          const DynamicSparsityPattern &,
                          const MPI_Comm &,
                          const bool);

    template void
    SparseMatrix::vmult (MPI::Vector &,
                         const MPI::Vector &) const;
    template void
    SparseMatrix::vmult (dealii::Vector<double> &,
                         const dealii::Vector<double> &) const;
    template void
    SparseMatrix::vmult (dealii::LinearAlgebra::distributed::Vector<double> &,
                         const dealii::LinearAlgebra::distributed::Vector<double> &) const;
#ifdef DEAL_II_WITH_MPI
    template void
    SparseMatrix::vmult (dealii::LinearAlgebra::EpetraWrappers::Vector &,
                         const dealii::LinearAlgebra::EpetraWrappers::Vector &) const;
#endif
    template void
    SparseMatrix::Tvmult (MPI::Vector &,
                          const MPI::Vector &) const;
    template void
    SparseMatrix::Tvmult (dealii::Vector<double> &,
                          const dealii::Vector<double> &) const;
    template void
    SparseMatrix::Tvmult (dealii::LinearAlgebra::distributed::Vector<double> &,
                          const dealii::LinearAlgebra::distributed::Vector<double> &) const;
#ifdef DEAL_II_WITH_MPI
    template void
    SparseMatrix::Tvmult (dealii::LinearAlgebra::EpetraWrappers::Vector &,
                          const dealii::LinearAlgebra::EpetraWrappers::Vector &) const;
#endif
    template void
    SparseMatrix::vmult_add (MPI::Vector &,
                             const MPI::Vector &) const;
    template void
    SparseMatrix::vmult_add (dealii::Vector<double> &,
                             const dealii::Vector<double> &) const;
    template void
    SparseMatrix::vmult_add (dealii::LinearAlgebra::distributed::Vector<double> &,
                             const dealii::LinearAlgebra::distributed::Vector<double> &) const;
#ifdef DEAL_II_WITH_MPI
    template void
    SparseMatrix::vmult_add (dealii::LinearAlgebra::EpetraWrappers::Vector &,
                             const dealii::LinearAlgebra::EpetraWrappers::Vector &) const;
#endif
    template void
    SparseMatrix::Tvmult_add (MPI::Vector &,
                              const MPI::Vector &) const;
    template void
    SparseMatrix::Tvmult_add (dealii::Vector<double> &,
                              const dealii::Vector<double> &) const;
    template void
    SparseMatrix::Tvmult_add (dealii::LinearAlgebra::distributed::Vector<double> &,
                              const dealii::LinearAlgebra::distributed::Vector<double> &) const;
#ifdef DEAL_II_WITH_MPI
    template void
    SparseMatrix::Tvmult_add (dealii::LinearAlgebra::EpetraWrappers::Vector &,
                              const dealii::LinearAlgebra::EpetraWrappers::Vector &) const;
#endif
    \}
}

